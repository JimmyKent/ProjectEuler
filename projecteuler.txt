Multiples of 3 and 5
Problem 1 
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.


Answer:
233168

//error
public class Test {

    public static void main(String[] args) {
        int N = 1000;
        int x = 3;
        int y =5;
        int sum = 0;
        int current = 0;
        for (int i = 1; i < N / 3 + 1; i++) {
            current = x * i;
            if (current < N){
                sum += current;
            }
            current = y * i;
            if (current < N){
                sum += current;
            }
        }

        System.out.print("sum = " + sum);

    }


}


package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        int N = 1000;
        int sum = 0;
        for (int i = 1; i < N ; i++) {
             if(i % 3 == 0 || i % 5 == 0){
                 sum += i;
             }
        }

        System.out.print("sum = " + sum);

    }


}


Problem 2 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Answer:
4613732

//https://projecteuler.net/thread=2

package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        int m = 1;
        int n = 1;
        int sum = 0;
        int total = 4000000;
        while(m < total && n < total) {
            m = m + n;
            n = m + n;
            if(m % 2 == 0)
                sum += m;
            if (n % 2 == 0)
                sum += n;
        }
        System.out.print("sum : " + sum);
    }
    
}



package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        long n = 600851475143L;
        int k = (int) Math.sqrt(n);//一个数的最大公因数不会超过它的开平方数
        if (0 == k % 2) {
            k++;//如果k为一个偶数，则k=k+1
        }
        System.out.println(k);
        for (int i = k; i > 0; i -= 2) {
            if (0 == n % i) {
                if (prime(i)) {
                    System.out.print(i + ", ");
                }
            }
        }
    }

    public static boolean prime(long x) {
        //判定一个数是否为素数
        for (long i = 3; i < Math.sqrt(x); i += 2) {
            if (0 == x % i) {
                return false;
            }
        }
        return true;
    }
}


Largest palindrome product
Problem 4 
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.


Answer:
906609

package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */
//回文
public class Test {

    public static void main(String[] args) {
        int max = 0;
        int current = 0;
        for (int i = 100; i < 999; i++) {
            for (int j = 100; j < 999; j++) {
                current = i * j;
                if (max < current && palindrome(current)) {
                    max = current;
                }
            }
        }

        System.out.print("max  :  " + max);
    }


    private static boolean palindrome(int num) {
        int x = 0;
        int y = num;

        while (y > 0) {
            x = y % 10 + x * 10;
            y /= 10;
        }


        return x == num;
    }
}


Problem 5 
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?


Answer:
232792560

//最小公倍数 int 越界了
232792560
public class Test {

    public static void main(String[] args) {
        long lcm = 1;//Least common multiple
        for (int i = 2; i < 21; i++) {
            lcm = getLCM(lcm, i);
            System.out.println("i : " + i + " lcm  :  " + lcm);
        }

        System.out.print("lcm  :  " + lcm);
    }


    private static long getGCD(long a, long b) {
        return a % b == 0 ? b : getGCD(b, a % b);
    }

    private static long getLCM(long a, long b) {
        return a * b / getGCD(a, b);
    }
}



Sum square difference
Problem 6 
The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.


Answer:
25164150

public static void main(String[] args) {
        long x = 0;

        long y = 0;
        for (int i = 1; i < 101; i++) {
            x += i;
        }
        x = x * x;
        for (int i = 1; i < 101; i++) {
            y += i * i;
        }
        System.out.println("x  :  " + x);
        System.out.println("y  :  " + y);
        System.out.println("x - y  :  " + (x - y));
    }



//problem 7

package com.example.jinguochong.myapplication;


import java.util.ArrayList;
import java.util.List;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {

        List<Long> primeNums = new ArrayList<>();
        long index = 2;
        long i = 2;
        primeNums.add(index);
        while (primeNums.size() < 10001) {
            for (int j = 0; j < primeNums.size(); j++) {
                if (i % primeNums.get(j) == 0) {
                    break;
                }
                if (j == primeNums.size() - 1) {
                    primeNums.add(i);
                }
            }
            i++;
        }
        System.out.println("primeNums : " + primeNums.get(10000));


    }


}








Special Pythagorean triplet
Problem 9 
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.


Answer:
31875000




public class Test {

    public static void main(String[] args) {

        int a = 1, b = 1, c = 1;

        //System.out.println(a + "" + b + "" + c);

        while (a < 1000) {
            b = a + 1;
            while (b < 1000 - a) {
                c = 1000 - a - b;
                if (a * a + b * b == c * c) {
                    System.out.println(a + "," + b + "," + c);
                    System.out.println(a * b * c +"");
                }
                b++;
                //System.out.println(a + "," + b + "," + c);
            }

            a++;
        }


    }


}




Summation of primes
Problem 10 
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.


Answer:
142913828922


    public static void main(String[] args) {

        int top = 2000000;
        List<Integer> primes = new ArrayList<>();
        primes.add(2);
        for (int a = 3; a < top; a++) {
            for (int j = 0; j < primes.size(); j++) {
                if (a % primes.get(j) == 0) {
                    break;
                }
                if (j == primes.size() - 1) {
                    primes.add(a);
                    //System.out.println("a : " + a);
                }
            }
        }
        long sum = 0;
        for (int i = 0; i < primes.size(); i++) {
            sum += primes.get(i);
        }
        System.out.println("sum : " + sum);
    }




/**
 * Created by jinguochong on 2017/7/30.
 * Largest product in a grid
 Problem 11
Answer:
70600674
 */

public class Test {

    public static void main(String[] args) {
        int[][] nums = new int[][]{
                {8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8},
                {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 0},
                {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65},
                {52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91},
                {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
                {24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
                {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
                {67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21},
                {24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
                {21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95},
                {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 9, 53, 56, 92},
                {16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57},
                {86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
                {19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40},
                {04, 52, 8, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
                {88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
                {04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36},
                {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16},
                {20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54},
                {01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48},
        };


        int product = 0;//乘积
        int a, b, c, d;

        int shu = nums.length;//20
        int hang = nums[0].length;
        System.out.println("hang : " + hang);

        //横
        for (int i = 0; i < shu; i++) {
            for (int j = 0; j < hang - 3; j++) {
                product = Math.max(product, nums[i][j] * nums[i][(j + 1)] * nums[i][(j + 2)] * nums[i][(j + 3)]);
            }
        }
        System.out.println("product : " + product);

        //竖
        for (int i = 0; i < hang - 3; i++) {
            for (int j = 0; j < shu; j++) {
                product = Math.max(product, nums[i][j] * nums[i + 1][j] * nums[i + 2][j] * nums[i + 3][j]);
            }
        }
        System.out.println("product : " + product);

        //撇
        for (int i = 3; i < shu; i++) {
            for (int j = 0; j < hang - 3; j++) {
                product = Math.max(product, nums[i][j] * nums[i - 1][j + 1] * nums[i - 2][j + 2] * nums[i - 3][j + 3]);
            }
        }
        System.out.println("product : " + product);

        //捺
        for (int i = 0; i < shu - 3; i++) {
            for (int j = 3; j < hang; j++) {
                product = Math.max(product, nums[i][i] * nums[i + 1][i + 1] * nums[i + 2][i + 2] * nums[i + 3][i + 3]);
            }
        }
        System.out.println("product : " + product);

    }


}



/**
 * Created by jinguochong on 2017/7/30.
 * Problem 12
 *
 Answer:
 76576500
 */

public class Test {

    //那么第一个拥有超过500个约数的三角形数是多少？
    public static void main(String[] args) {

        int i = 1;
        int count = i;
        while (!has500Divisor(count)) {
            i++;
            count += i;
            //System.out.println("i : " + i);
            //System.out.println("count : " + count);
        }

        System.out.println("count : " + count);

    }


    private static boolean has500Divisor(int num) {
        int i = 1;

        int count = 0;

        int square = (int) Math.sqrt(num);
        while (i < square) {

            if (num % i == 0) {
                count++;
            }
            i++;
        }
        count *= 2;
        if (square * square == num) {
            count++;
        }

        return count > 499;
    }


}





