Multiples of 3 and 5
Problem 1 
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.


Answer:
233168

//error
public class Test {

    public static void main(String[] args) {
        int N = 1000;
        int x = 3;
        int y =5;
        int sum = 0;
        int current = 0;
        for (int i = 1; i < N / 3 + 1; i++) {
            current = x * i;
            if (current < N){
                sum += current;
            }
            current = y * i;
            if (current < N){
                sum += current;
            }
        }

        System.out.print("sum = " + sum);

    }


}


package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        int N = 1000;
        int sum = 0;
        for (int i = 1; i < N ; i++) {
             if(i % 3 == 0 || i % 5 == 0){
                 sum += i;
             }
        }

        System.out.print("sum = " + sum);

    }


}


Problem 2 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Answer:
4613732

//https://projecteuler.net/thread=2

package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        int m = 1;
        int n = 1;
        int sum = 0;
        int total = 4000000;
        while(m < total && n < total) {
            m = m + n;
            n = m + n;
            if(m % 2 == 0)
                sum += m;
            if (n % 2 == 0)
                sum += n;
        }
        System.out.print("sum : " + sum);
    }
    
}



package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */

public class Test {

    public static void main(String[] args) {
        long n = 600851475143L;
        int k = (int) Math.sqrt(n);//一个数的最大公因数不会超过它的开平方数
        if (0 == k % 2) {
            k++;//如果k为一个偶数，则k=k+1
        }
        System.out.println(k);
        for (int i = k; i > 0; i -= 2) {
            if (0 == n % i) {
                if (prime(i)) {
                    System.out.print(i + ", ");
                }
            }
        }
    }

    public static boolean prime(long x) {
        //判定一个数是否为素数
        for (long i = 3; i < Math.sqrt(x); i += 2) {
            if (0 == x % i) {
                return false;
            }
        }
        return true;
    }
}


Largest palindrome product
Problem 4 
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.


Answer:
906609

package com.example.jinguochong.myapplication;

/**
 * Created by jinguochong on 2017/7/30.
 */
//回文
public class Test {

    public static void main(String[] args) {
        int max = 0;
        int current = 0;
        for (int i = 100; i < 999; i++) {
            for (int j = 100; j < 999; j++) {
                current = i * j;
                if (max < current && palindrome(current)) {
                    max = current;
                }
            }
        }

        System.out.print("max  :  " + max);
    }


    private static boolean palindrome(int num) {
        int x = 0;
        int y = num;

        while (y > 0) {
            x = y % 10 + x * 10;
            y /= 10;
        }


        return x == num;
    }
}


//最小公倍数
